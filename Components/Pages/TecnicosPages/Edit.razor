@page "/Tecnico/Edit"
@page "/Tecnico/Edit/{TecnicoId:int}"
@inject TecnicoService tecnicoService
@using RegistroTecnicos.Models
@using RegistroTecnicos.Services
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<EditForm Model="tecnicos" OnInvalidSubmit="Guardar">
    <DataAnnotationsValidator/>
    <div class="card shadow-lg border-0" style="background-color white">

           <div class="card-header bg-primary text-center text-white py-2 rounded">
                <h3 style="font-weight: bold;" class="font-weight-bold">Registro de Técnicos</h3>
            </div>
    
            <div class="card-body">
                @*TecnicoId*@
                <div class="mb-3">
                    <label for="TecnicoId" class="form-label">TécnicoId:</label>
                    <InputNumber @bind-Value="tecnicos.TecnicoId" class="form-control"/>
                </div>

                @*Nombres*@
                <div class="mb-3">
                <label for="Nombres" class="form-label">Nombres:</label>
                <InputText @bind-Value="tecnicos.Nombres" class="form-control" />
                <ValidationMessage For="@(()=>tecnicos.Nombres)" />
                </div>

                @*SueldoHora*@
            <div class="mb-3">
                <label for="SueldoHora" class="form-label">SueldoHora:</label>
                <InputNumber @bind-Value="tecnicos.SueldoHora" class="form-control" />
                <ValidationMessage For="@(()=>tecnicos.SueldoHora)" />
            </div>

            </div>

            <div class="card-footer d-flex justify-content-lg-center text-center">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus-circle"></span>Nuevo</button>
                <button type="button" class="btn btn-outline-success ml-2" @onclick="Guardar"><span class="bi bi-check-circle-fill"></span>Guardar</button>
                <button type="button" class="btn btn-outline-danger" @onclick="Retroceder"><span class="bi bi-arrow-bar-left"></span>Retroceder</button>

            </div>

            </div>

    </div>

</EditForm>

@code {

    [Parameter]
    public int TecnicoId { get; set; }

    public Tecnicos tecnicos { get; set; } = new Tecnicos();

    public bool existe = false;

    public async Task Buscar()
    {

        existe = false;
        var tecnicoEncontrado=await tecnicoService.Buscar(TecnicoId);
        if (tecnicoEncontrado != null)
        {
            tecnicos = tecnicoEncontrado;
        }
        else
        {
            Nuevo();
        }
    }

    public async Task Nuevo()
    {
        tecnicos = new Tecnicos();
        
    }

    public async Task<bool> Validar()
    {
        var listaTecnicos= await tecnicoService.Listar(t =>t.Nombres.ToLower() == tecnicos.Nombres.ToLower() && t.TecnicoId != tecnicos.TecnicoId);
        existe = listaTecnicos.Any();
        return !existe;
    }

    public async Task Retroceder()
    {
        navigationManager.NavigateTo("/Tecnico/Index");
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            
            return;
        }

        var resultado = await tecnicoService.Guardar(tecnicos);
        if (resultado)
        {
            
            await Retroceder();
        }
        
    }

}